// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package maybe

type Bool struct {
	Value bool
	IsSet bool
}

func (m *Bool) Get() (bool, bool) {
	return m.Value, m.IsSet
}

func (m *Bool) GetDefault(def bool) bool {
	if m.IsSet {
		return m.Value
	} else {
		return def
	}
}

func (m *Bool) Set(val bool) {
	m.Value = val
	m.IsSet = true
}

func (m *Bool) Unset() {
	m.IsSet = false
}

type Byte struct {
	Value byte
	IsSet bool
}

func (m *Byte) Get() (byte, bool) {
	return m.Value, m.IsSet
}

func (m *Byte) GetDefault(def byte) byte {
	if m.IsSet {
		return m.Value
	} else {
		return def
	}
}

func (m *Byte) Set(val byte) {
	m.Value = val
	m.IsSet = true
}

func (m *Byte) Unset() {
	m.IsSet = false
}

type Complex128 struct {
	Value complex128
	IsSet bool
}

func (m *Complex128) Get() (complex128, bool) {
	return m.Value, m.IsSet
}

func (m *Complex128) GetDefault(def complex128) complex128 {
	if m.IsSet {
		return m.Value
	} else {
		return def
	}
}

func (m *Complex128) Set(val complex128) {
	m.Value = val
	m.IsSet = true
}

func (m *Complex128) Unset() {
	m.IsSet = false
}

type Complex64 struct {
	Value complex64
	IsSet bool
}

func (m *Complex64) Get() (complex64, bool) {
	return m.Value, m.IsSet
}

func (m *Complex64) GetDefault(def complex64) complex64 {
	if m.IsSet {
		return m.Value
	} else {
		return def
	}
}

func (m *Complex64) Set(val complex64) {
	m.Value = val
	m.IsSet = true
}

func (m *Complex64) Unset() {
	m.IsSet = false
}

type Error struct {
	Value error
	IsSet bool
}

func (m *Error) Get() (error, bool) {
	return m.Value, m.IsSet
}

func (m *Error) GetDefault(def error) error {
	if m.IsSet {
		return m.Value
	} else {
		return def
	}
}

func (m *Error) Set(val error) {
	m.Value = val
	m.IsSet = true
}

func (m *Error) Unset() {
	m.IsSet = false
}

type Float32 struct {
	Value float32
	IsSet bool
}

func (m *Float32) Get() (float32, bool) {
	return m.Value, m.IsSet
}

func (m *Float32) GetDefault(def float32) float32 {
	if m.IsSet {
		return m.Value
	} else {
		return def
	}
}

func (m *Float32) Set(val float32) {
	m.Value = val
	m.IsSet = true
}

func (m *Float32) Unset() {
	m.IsSet = false
}

type Float64 struct {
	Value float64
	IsSet bool
}

func (m *Float64) Get() (float64, bool) {
	return m.Value, m.IsSet
}

func (m *Float64) GetDefault(def float64) float64 {
	if m.IsSet {
		return m.Value
	} else {
		return def
	}
}

func (m *Float64) Set(val float64) {
	m.Value = val
	m.IsSet = true
}

func (m *Float64) Unset() {
	m.IsSet = false
}

type Int struct {
	Value int
	IsSet bool
}

func (m *Int) Get() (int, bool) {
	return m.Value, m.IsSet
}

func (m *Int) GetDefault(def int) int {
	if m.IsSet {
		return m.Value
	} else {
		return def
	}
}

func (m *Int) Set(val int) {
	m.Value = val
	m.IsSet = true
}

func (m *Int) Unset() {
	m.IsSet = false
}

type Int16 struct {
	Value int16
	IsSet bool
}

func (m *Int16) Get() (int16, bool) {
	return m.Value, m.IsSet
}

func (m *Int16) GetDefault(def int16) int16 {
	if m.IsSet {
		return m.Value
	} else {
		return def
	}
}

func (m *Int16) Set(val int16) {
	m.Value = val
	m.IsSet = true
}

func (m *Int16) Unset() {
	m.IsSet = false
}

type Int32 struct {
	Value int32
	IsSet bool
}

func (m *Int32) Get() (int32, bool) {
	return m.Value, m.IsSet
}

func (m *Int32) GetDefault(def int32) int32 {
	if m.IsSet {
		return m.Value
	} else {
		return def
	}
}

func (m *Int32) Set(val int32) {
	m.Value = val
	m.IsSet = true
}

func (m *Int32) Unset() {
	m.IsSet = false
}

type Int64 struct {
	Value int64
	IsSet bool
}

func (m *Int64) Get() (int64, bool) {
	return m.Value, m.IsSet
}

func (m *Int64) GetDefault(def int64) int64 {
	if m.IsSet {
		return m.Value
	} else {
		return def
	}
}

func (m *Int64) Set(val int64) {
	m.Value = val
	m.IsSet = true
}

func (m *Int64) Unset() {
	m.IsSet = false
}

type Int8 struct {
	Value int8
	IsSet bool
}

func (m *Int8) Get() (int8, bool) {
	return m.Value, m.IsSet
}

func (m *Int8) GetDefault(def int8) int8 {
	if m.IsSet {
		return m.Value
	} else {
		return def
	}
}

func (m *Int8) Set(val int8) {
	m.Value = val
	m.IsSet = true
}

func (m *Int8) Unset() {
	m.IsSet = false
}

type Rune struct {
	Value rune
	IsSet bool
}

func (m *Rune) Get() (rune, bool) {
	return m.Value, m.IsSet
}

func (m *Rune) GetDefault(def rune) rune {
	if m.IsSet {
		return m.Value
	} else {
		return def
	}
}

func (m *Rune) Set(val rune) {
	m.Value = val
	m.IsSet = true
}

func (m *Rune) Unset() {
	m.IsSet = false
}

type String struct {
	Value string
	IsSet bool
}

func (m *String) Get() (string, bool) {
	return m.Value, m.IsSet
}

func (m *String) GetDefault(def string) string {
	if m.IsSet {
		return m.Value
	} else {
		return def
	}
}

func (m *String) Set(val string) {
	m.Value = val
	m.IsSet = true
}

func (m *String) Unset() {
	m.IsSet = false
}

type Uint struct {
	Value uint
	IsSet bool
}

func (m *Uint) Get() (uint, bool) {
	return m.Value, m.IsSet
}

func (m *Uint) GetDefault(def uint) uint {
	if m.IsSet {
		return m.Value
	} else {
		return def
	}
}

func (m *Uint) Set(val uint) {
	m.Value = val
	m.IsSet = true
}

func (m *Uint) Unset() {
	m.IsSet = false
}

type Uint16 struct {
	Value uint16
	IsSet bool
}

func (m *Uint16) Get() (uint16, bool) {
	return m.Value, m.IsSet
}

func (m *Uint16) GetDefault(def uint16) uint16 {
	if m.IsSet {
		return m.Value
	} else {
		return def
	}
}

func (m *Uint16) Set(val uint16) {
	m.Value = val
	m.IsSet = true
}

func (m *Uint16) Unset() {
	m.IsSet = false
}

type Uint32 struct {
	Value uint32
	IsSet bool
}

func (m *Uint32) Get() (uint32, bool) {
	return m.Value, m.IsSet
}

func (m *Uint32) GetDefault(def uint32) uint32 {
	if m.IsSet {
		return m.Value
	} else {
		return def
	}
}

func (m *Uint32) Set(val uint32) {
	m.Value = val
	m.IsSet = true
}

func (m *Uint32) Unset() {
	m.IsSet = false
}

type Uint64 struct {
	Value uint64
	IsSet bool
}

func (m *Uint64) Get() (uint64, bool) {
	return m.Value, m.IsSet
}

func (m *Uint64) GetDefault(def uint64) uint64 {
	if m.IsSet {
		return m.Value
	} else {
		return def
	}
}

func (m *Uint64) Set(val uint64) {
	m.Value = val
	m.IsSet = true
}

func (m *Uint64) Unset() {
	m.IsSet = false
}

type Uint8 struct {
	Value uint8
	IsSet bool
}

func (m *Uint8) Get() (uint8, bool) {
	return m.Value, m.IsSet
}

func (m *Uint8) GetDefault(def uint8) uint8 {
	if m.IsSet {
		return m.Value
	} else {
		return def
	}
}

func (m *Uint8) Set(val uint8) {
	m.Value = val
	m.IsSet = true
}

func (m *Uint8) Unset() {
	m.IsSet = false
}

type Uintptr struct {
	Value uintptr
	IsSet bool
}

func (m *Uintptr) Get() (uintptr, bool) {
	return m.Value, m.IsSet
}

func (m *Uintptr) GetDefault(def uintptr) uintptr {
	if m.IsSet {
		return m.Value
	} else {
		return def
	}
}

func (m *Uintptr) Set(val uintptr) {
	m.Value = val
	m.IsSet = true
}

func (m *Uintptr) Unset() {
	m.IsSet = false
}
